name: main-branch-workflow
on:
  push:
    branches:
      - main

permissions: write-all

jobs:
  get-pr-number:
    name: Get PR Number
    runs-on: ubuntu-latest
    outputs:
      pr_number: ${{ steps.extract_pr_number.outputs.pr_number }}
    env:
      GH_TOKEN: ${{ github.token }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Extract PR Number
        id: extract_pr_number
        run: |
          PR_NUMBER=$(gh pr list --state merged --base main --json number,mergedAt --jq 'sort_by(.mergedAt) | reverse | .[0].number')
          echo "PR number: $PR_NUMBER"
          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT

  get-pro-version-label:
    name: Get Pro Version Label
    needs: get-pr-number
    uses: ./.github/workflows/_get_version_label.yml
    with:
      application: pro
      pr_number: ${{ needs.get-pr-number.outputs.pr_number }}
    secrets:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  calculate-pro-new-version:
    name: Calculate Pro New Version
    if: ${{ needs.get-pro-version-label.outputs.version_type }}
    needs: get-pro-version-label
    uses: ./.github/workflows/_determine_new_version.yml
    with:
      application: pro
      version_type: ${{ needs.get-pro-version-label.outputs.version_type }}

  tag-pro-version:
    name: Apply Pro Tag
    needs: calculate-pro-new-version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Apply new tags
        run: |
          git tag "pro-${{ needs.calculate-pro-new-version.outputs.new_version }}"
          echo "Tagged pro with version ${{ needs.calculate-pro-new-version.outputs.new_version }}"
          git push --tags

  get-investor-version-label:
    name: Get Investor Version Label
    needs: get-pr-number
    uses: ./.github/workflows/_get_version_label.yml
    with:
      application: investor
      pr_number: ${{ needs.get-pr-number.outputs.pr_number }}
    secrets:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  calculate-investor-new-version:
    name: Calculate Investor New Version
    if: ${{ needs.get-investor-version-label.outputs.version_type }}
    needs: get-investor-version-label
    uses: ./.github/workflows/_determine_new_version.yml
    with:
      application: investor
      version_type: ${{ needs.get-investor-version-label.outputs.version_type }}

  tag-investor-version:
    name: Apply Investor Tag
    needs: calculate-investor-new-version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Apply new tags
        run: |
          git tag "investor-${{ needs.calculate-investor-new-version.outputs.new_version }}"
          echo "Tagged investor with version ${{ needs.calculate-investor-new-version.outputs.new_version }}"
          git push --tags

  check-if-manual-deploy:
    name: Get Manual Deploy Label
    runs-on: ubuntu-latest
    needs: get-pr-number
    outputs:
      manual_deploy: ${{ steps.get_manual_deploy_label.outputs.manual_deploy }}
    env:
      GH_TOKEN: ${{ github.token }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get PR Labels
        id: get_labels
        run: |
          PR_NUMBER=${{ needs.get-pr-number.outputs.pr_number }}
          LABELS=$(gh pr view $PR_NUMBER --json labels --jq '.labels[].name')
          echo "$LABELS" > labels.txt
          echo "Labels:"
          cat labels.txt

      - name: Extract Manual Deploy Label
        id: get_manual_deploy_label
        run: |
          if grep -q "manual deploy" labels.txt; then
            echo "Manual deploy: true"
            echo "manual_deploy=true" >> $GITHUB_OUTPUT
          else
            echo "Manual deploy: false"
            echo "manual_deploy=false" >> $GITHUB_OUTPUT
          fi

  deploy_pro:
    name: Deploy Pro Application
    needs: [tag-pro-version, check-if-manual-deploy]
    uses: ./.github/workflows/deploy.yml
    with:
      application: pro
      version: ${{ needs.outputs.pro_new_version }}
      manual_deploy: "${{ needs.check-if-manual-deploy.outputs.manual_deploy == 'true' }}"

  deploy_investor:
    name: Deploy Investor Application
    needs: [tag-investor-version, check-if-manual-deploy]
    uses: ./.github/workflows/deploy.yml
    with:
      application: investor
      version: ${{ needs.outputs.investor_new_version }}
      manual_deploy: "${{ needs.check-if-manual-deploy.outputs.manual_deploy == 'true' }}"
